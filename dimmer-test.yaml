esphome:
  name: dimmer-test
  friendly_name: dimmer-test

esp8266:
  board: esp01_1m

globals:
  - id: my_global_bool
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: my_global_float
    type: float
    restore_value: no
    initial_value: '0.3'

# Enable Home Assistant API
api:
  encryption:
    key: "HB03mOi4f3uYLyeZnBScaJI8RiwHop3ADu+Po71/9t0="

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

logger:
    baud_rate: 0

uart:
    tx_pin: 1
    rx_pin: 3
    baud_rate: 115200

switch:
# This is to restart the ESPHome device remotely
  - platform: restart
    name: "Restart"

sensor:
  # NTC Temperature
  - platform: ntc
    sensor: temp_resistance_reading
    name: Device Temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: 70
        then:
          - logger.log: "Switch turned off because temperature exceeded ${max_temp}°C"
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Overtemperature
              data_template:
                message: Switch turned off because temperature exceeded ${max_temp}°C
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0

light:
    - platform: shelly_dimmer
      name: Light
      id: led
      power:
        name: Power
      voltage:
        name: Voltage
      current:
        name: Current
      max_brightness: 750
      min_brightness: 235
      warmup_brightness: 18
      firmware:
        version: "51.6"
        update: false
      restore_mode: RESTORE_DEFAULT_OFF
      default_transition_length: 0s
      leading_edge: false

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO14
      mode: INPUT
    id: led_touch
    name: Push Button
    #filters:
    #  - delayed_on: 20ms  
    #  - delayed_off: 20ms 

    on_click:
      then:
        - if:
            condition:
              light.is_off: led
            then:
              - light.turn_on: 
                  id: led
                  brightness: !lambda |-
                    return id(my_global_float);
              - lambda: |-
                  id(my_global_bool) = (true);
                  ESP_LOGD("main", "Global value brightness is: %f", id(my_global_float));
            else:
              light.turn_off: led
             
    on_press:
      then:
      - if:
          condition: 
              lambda: |-
                return id(my_global_bool);
# When above condition evaluates to true - Fade_up function else Fade_down
          then:
          - delay: 0.5s
          - while:
              condition:
                binary_sensor.is_on: led_touch
              then:
                - light.dim_relative:
                    id: led
                    relative_brightness: 2%
                    transition_length: 0.075s
                - delay: 0.075s
                - lambda: |-
                    id(my_global_float) = id(led).current_values.get_brightness();
                    ESP_LOGD("main", "Global value is: %f", id(my_global_float));
          - lambda: |-
              id(my_global_bool) = (false);
          else:
          - delay: 0.5s
          - while:
              condition:
                and:
                  - binary_sensor.is_on: led_touch
# This is where I want to set minimum value so that touch sensor only allows 4% minimum
                  - lambda: |-
                      return {id(led).current_values.get_brightness() > 0.04};
              then:
                - light.dim_relative:
                    id: led
                    relative_brightness: -2%
                    transition_length: 0.075s
                - delay: 0.075s
                - lambda: |-
                    id(my_global_float) = id(led).current_values.get_brightness();
                    ESP_LOGD("main", "Global value brightness is: %f", id(my_global_float));
          - lambda: |-
              id(my_global_bool) = (true);